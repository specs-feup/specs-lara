import lara.util.Logger;

/**
 * Adds calls to RAPL between a section of code
 */
aspectdef MeasureEnergy
	input $jp, message end

	//call loggerOut : NewLogger();
	//var logger = loggerOut.logger;

	var logger = new Logger();

	
	// Build message
	if(message === undefined) {
		message = "spent ";
		
		if($jp.name != undefined) {
			message = $jp.name + " " + message;
		}
	}

	// Add include
	$file = $jp.ancestor("file");
	if($file === undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}
	$file.addInclude("rapl.h", false);
	
	select $jp end
	apply
		$jp.insert before "rapl_monitor_start();";
		
		var energyVar = "energy"; // + "_" + nextId(); Needs a way to have a "unique id" (global counter?)
		$raplResult = AstFactory.exprLiteral("rapl_monitor_report()");
		$raplResultDecl = AstFactory.varDecl(energyVar, $raplResult);
		
		// Build message
		logger.add(message).addDouble(energyVar).add("J");
				
		$jp.exec insertAfter($raplResultDecl);
		logger.log($raplResultDecl);
		
	end
	
	// Get stmt from $jp
	//$jp.toStmt;
	
end
