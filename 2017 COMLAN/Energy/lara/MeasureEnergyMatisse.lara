aspectdef MeasureEnergyMatisse
	
	var idCounter = 0;
	
	select function.call end
	apply
		var matisse_energy_start = "matisse_energy_start_"+idCounter;
		var matisse_energy_end = "matisse_energy_end_"+idCounter;
		var matisse_energy = "matisse_energy_"+(idCounter++);

		$call.insert before %{[[matisse_energy_start]] = getCurrentEnergy();}%;

		$call.insert after %{fprintf('Energy:%f\n', [[matisse_energy]]);}%;
		$call.insert after %{[[matisse_energy]] = ([[matisse_energy_end]] - [[matisse_energy_start]]) / 1000000;}%;
		$call.insert after %{[[matisse_energy_end]] = getCurrentEnergy();}%;
	end

    select app end
    apply
        $app.addFile("getCurrentEnergy.m", getCurrentEnergy());
    end
	
end

codedef getCurrentEnergy()%{
function [total] = getCurrentEnergy()
   % Check if folder exists
   raplFolder = '/sys/class/powercap/intel-rapl/';
   if (exist(raplFolder) ~= 7)
      disp(strcat('RAPL folder is not available: ', raplFolder));
      return;
   end
   % Get RAPL folders for each package
   %listing = dir(raplFolder);
   %listing
   raplFolderListing = eval('ls(raplFolder)');
   folders = strsplit(raplFolderListing);
   filter = strncmp(folders, 'intel-rapl:', numel('intel-rapl:'));
   packageFolders = folders(filter);
   energyReadings = zeros(size(packageFolders));
   for i = 1:numel(packageFolders)
      energyFile = strcat(packageFolders{i}, '/energy_uj');
      energyFilepath = strcat(raplFolder, energyFile);
      [status, output] = system(cstrcat('cat ', energyFilepath));
      energyReadings(i) = str2num(output);
   end
   total = sum(energyReadings);
end
}%end
