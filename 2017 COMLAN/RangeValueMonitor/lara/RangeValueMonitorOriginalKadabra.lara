import lara.code.Logger;
import lara.util.StringSet;

aspectdef RangeValueMonitorKadabra

	var monitorName = "monitor";
	call getter: GetMonitor(monitorName);
	$min = getter.$min;
	$max = getter.$max;
	$monitor = getter.$monitor;
	initName = monitorName+"_range_init";
	updateName = monitorName+"_range_update";
	printName = monitorName+"_range_print";


	var monitoredVariables = new StringSet();
	var laraObj = new LaraObject();
	
    	select function.var{inLoopHeader==false} end
    	apply
		var varName = $var.name;
		var id = $function.id + "#" + varName;
		// If already monitored, continue
		if(monitoredVariables.has(id)) {
			continue;
		}

		// Add variable as monitored
		monitoredVariables.add(id);

		// Get expressions using this variable to monitor
		call validExprs : RangeValueMonitorValidExprs($function, varName);
	
		for($expr of validExprs.exprs) {
			var index = laraObj.getId($function.name, $expr.name);
			$expr.insert after%{[[$monitor.qualifiedName]].[[updateName]]([[index]], [[$expr.name]]);}%;
		}
  
    end
    
    select file.function{"main"} end
    apply
		var total = laraObj.getTotal();
		
		var minPath = $monitor.qualifiedName+'.'+$min.name;
		var maxPath = $monitor.qualifiedName+'.'+$max.name;
	
		// Initialize monitor
		$min.exec init %{new double[ [[total]] ]}%;
		$max.exec init %{new double[ [[total]] ]}%;
	
		//Declare Methods
		$monitor.exec insertStatic%{[[$monitor.qualifiedName]].[[initName]]();}%;
		$monitor.exec insertMethod (RangeMonitorInit(initName,total, minPath, maxPath));
		$monitor.exec insertMethod (RangeMonitorUpdate(updateName,$min.name,$max.name));
		$monitor.exec $m: newMethod(['public','static'], 'void', printName, [], "//printfunction");
	
		call get: GetReference($m);
		$printRangesEnd = get.$ref;
		//Print ranges
		var printRanges = new Logger(false);
		for(f in this.laraObj) {	
			printRanges.append(f).ln().logBefore($printRangesEnd);
	
			for(v in this.laraObj[f]) {
				id = this.laraObj[f][v];
				var rangeMin = $monitor.qualifiedName+"."+$min.name+"[" + id + "]";
				var rangeMax = $monitor.qualifiedName+"."+$max.name+"[" + id + "]";
				printRanges.append(v + ": {").appendDouble(rangeMin)
				.append(", ").appendDouble(rangeMax).append("}").ln()
				.logBefore($printRangesEnd);
			}
		}
		$printRangesEnd.replace '';
	
		//Add call to print
		call BeforeExit($function, $monitor.qualifiedName+'.'+printName+'();');
    end
end



aspectdef RangeValueMonitorValidExprs
	input $function, varName end
	output exprs end
	
	exprs = [];
	select $function.body.declaration end
	apply
		if($declaration.name === varName){
			exprs.push($declaration);
		}
	end
	
	select $function.body.statement.var end
	apply
		// Ignore expressions without name
//		if($var.name === undefined) {
//			continue;
//		}

		// Ignore expressions if name does not match
		if($var.name !== varName) {
			continue;
		}

		// Monitor only writes
		if($var.reference === "read") { //$var.reference === undefined || 
			continue;
		}

		if($var.isArray){
			continue;
		}

		// Ignore expressions inside loop headers
		if($var.inLoopHeader) {
			continue;
		}

		exprs.push($var);
		
	end

end

/**
 * Get/Create the class storing graphs and get/create the field for <graphVar> graph 
 */
aspectdef GetMonitor
	input varName end
	output $monitor, $min, $max end
	var className = "kadabra.utils.RangeMonitors";
	//If both class and field exists
	select file.class{className}.field{varName+"Min"} end
	apply
		$monitor = $class;
		$min = $field; //return field
	end
	//If both class and field exists
	select file.class{className}.field{varName+"Max"} end
	apply
		$max = $field; //return field
	end
	if($min !== undefined){
		return;
	}
	//If class exists
	select file.class{className} end
	apply
		$monitor = $class;
		//Create field
		$class.exec $newMin: newField(["public","static"], "double[]", varName+"Min", null);
		$class.exec $newMax: newField(["public","static"], "double[]", varName+"Max", null);
		$min = $newMin;
		$max = $newMax;
		return;
	end
	//Otherwise create both
	select app end
	apply
		exec $class: newClass(className,null,[]);
		$monitor = $class;
		$class.exec $newMin: newField(["public","static"], "double[]", varName+"Min", null);
		$class.exec $newMax: newField(["public","static"], "double[]", varName+"Max", null);
		$min = $newMin;
		$max = $newMax;
		return;
	end
end

aspectdef GetReference
	input $m end
	output $ref end
	select $m.body.firstStmt end
	apply
		$ref = $firstStmt;
		return;
	end
end






codedef RangeMonitorInit(monitorName, total, minPath, maxPath) %{
public static void [[monitorName]]() {

	for(int i=0; i < [[total]]; i++) {

		[[minPath]][i] = Double.POSITIVE_INFINITY;
		[[maxPath]][i] = Double.NEGATIVE_INFINITY;
	}
}
}% end

codedef RangeMonitorUpdate(monitorName,minPath,maxPath) %{
public static void [[monitorName]](int id, double value) {
	if(value < [[minPath]][id]) [[minPath]][id] = value;
	if(value > [[maxPath]][id]) [[maxPath]][id] = value;
}
}% end

codedef RangeMonitorPrint(monitorName) %{
public static void [[monitorName]]() {
	int dummy = 0;
}
}% end


/**** UTILS *****/

aspectdef BeforeExit
	input $method, code end
	var inserted = false;

	//Try to insert before returns
	select $method.body.return end
	apply
		insert before '[[code]]';
		inserted = true;
	end
	if(inserted){
		return;
	}
	
	//Try to insert after last stmt (void methods)
	select $method.body.lastStmt end
	apply
		insert after '[[code]]';
		inserted = true;
	end
	if(inserted){
		return;
	}

	//Else, is an empty method
	select $method.body end
	apply
		replace '[[code]]';
	end
end