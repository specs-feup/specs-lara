import DynamicCallGraphBase;
import DynamicCallGraphAspects;
import kadabra.Utils;

/**
 * Inserts code for recording a pair function - call to the call graph
 */
DynamicCallGraph.prototype.add = function($call) {
	var $graph = this.getField();
	var fullName = $graph.declarator+"."+$graph.name;
	$executable = $call.ancestor("executable");
	if(isUndefined($executable)) {
		println("Could not add call at line " + $call.line + ", it is not inside an executable");
		return;
	}
	var execName = $executable.name != undefined?$executable.name: "anonymous";
	$type = $executable.ancestor("type");
	var typeName = $type.qualifiedName;
	var callDeclarator = $call.declarator;
	var id = this._getId(typeName+"_"+ execName, callDeclarator+"_"+$call.name);
	$call.insert after '[[fullName]][[[id]]]++;';
}

DynamicCallGraph.prototype.getField = function(){
	if(this.$graph === undefined){
		call g: GetGraph(this._getGraphId());
		this.$graph = g.$graph;
	}
	return this.$graph;
}

DynamicCallGraph.prototype.print = function($callSite) {

	/* Declare the array in each file */
	var total = this._getTotalPairs();
	var $graph = this.getField();
	$graph.exec init(%{new int[ [[total]] ]}%);

	var $function = undefined;
	if($callSite.instanceOf("method")) {
		$function = $callSite;
	} else {	
		$function = $callSite.ancestor("method");
		if(isUndefined($function)) {
			println("DynamicCallGraphPrint: Could not insert at joinpoint " + $callSite.joinPointType + ", only supports methods or inside functions");
			return;
		}	
	}
	

	var methodName = "print_"+this.getField();
	$class = this.getField().ancestor("type");

	call printer: GenerateDCGPrinter($class.qualifiedName+'.'+this.getField().name, this.laraObj);
	$class.exec insertMethod %{
		public static void [[methodName]](){
			[[printer.code]]
		}
	}%;

	call BeforeExit($function, $class.qualifiedName+'.'+methodName+'();');
}



