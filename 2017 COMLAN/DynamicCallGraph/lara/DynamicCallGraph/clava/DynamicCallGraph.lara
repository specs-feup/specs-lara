import DynamicCallGraphBase;
import DynamicCallGraphAspects;

/**
 * Inserts code for recording a pair function - call to the call graph
 */
DynamicCallGraph.prototype.add = function($call) {

	// Check if call has a function
	$function = $call.ancestor("function");
	if(isUndefined($function)) {
		println("Could not add call at line " + $call.line + ", it is not inside a function");
		return;
	}

	var id = this._getId($function.name, $call.name);
	$call.insert after '[[this._getGraphId()]][[[id]]]++;';
}



DynamicCallGraph.prototype.print = function($callSite) {

	/* Declare the array in each file */
	var total = this._getTotalPairs();
	call DynamicCallGraphSetup(this._getGraphId(), total);

	
	var $function = this._insertionPoint($callSite, "function");



	var $file = $callSite.ancestor("file");

	$file.exec addInclude("stdio.h", true);
	
	$function.exec insertReturn('printf("digraph ' + this.name + ' {\\n");');

	for (caller in this.laraObj) {
		for (callee in this.laraObj[caller]) {
			var id = this.laraObj[caller][callee];
			$function.exec insertReturn(graphvizConnections(this._getGraphId(), id, caller, callee));
		}
	}
	$function.exec insertReturn(%{printf("}\n");}%);
	
}


codedef graphvizConnections(graphVar, id, caller, callee) %{
	if ([[graphVar]][ [[id]] ] != 0) {
		printf("\t[[caller]] -> [[callee]] [label=\"%d\"];\n", [[graphVar]][[[id]]]);
	}
}% end

