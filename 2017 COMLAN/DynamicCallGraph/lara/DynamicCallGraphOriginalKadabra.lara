aspectdef DynamicCallGraph
	input targetClass = ".*" end
	var monitor;
	var qualifiedClassName;
	var printM = "printCallGraph"; //name for printing method

	
	call info: GetClasses();
	var tuple = new LaraObject();
	

	//Create a counting monitor list for the target class
	select class{name~=targetClass} end
	apply
		call counter: CountingMonitorList($class);
		monitor = counter;
		qualifiedClassName= $class.qualifiedName;
		exec newMethod(["public", "static"], "void",printM,[]); //create the printing method
	end
	
 	//Create an ID for the method->call tuple
	select class{name~=targetClass}.method.call end
	apply
		var id = 	tuple.getId($class.name +'_'+ $method.name, $call.declarator+"_"+$call.name);
		var increment = monitor.increment(id);
		insert before '[[increment]]';
	end
	
	//initialize the monitor list with the total of tuples
	monitor.init(tuple.getTotal());
	select class{name~=targetClass}.method{printM}.body end
	apply
		//generate and insert printing code inside the DCG printer method
		call printer:GenerateDCGPrinter(monitor, tuple, info.classes, info.apis);
		insert replace '[[printer.code]]';
	end

	//insert call to printer before exiting the application
	select class.method{"main"} end
	apply
		var callCode = qualifiedClassName+'.'+printM+'()';
		call BeforeExit($method, callCode);
	end
end

/**
 * Gather classes and methods that are part of the application 
 * and other library classes
 */
aspectdef GetClasses
	output
		apis = new LaraObject(),
		classes = new LaraObject()
	end
	
	//Select all methods inside classes
	select class.method end
	apply
		//add it to the 'classes' object
		classes.push($class.name, $method.name);
	end

	//Select calls inside methods
	select class.method.call end
	apply
	  //if 'classes' does not contain the class of the called method
	  if(!($call.declarator in classes)){
		//then add it as an API
		apis.set($call.declarator, $call.name, $call.qualifiedDecl);
	  }
	end
end


/**
 * Generate code to print the DCG
 */
aspectdef GenerateDCGPrinter
	input monitor, obj, methods, apis  end
	output code ='int value;\n' end
	code += '\tSystem.out.println("digraph DCG {\\n");\n';

	for(var c in methods) {

		code += '\tSystem.out.println("\\tsubgraph cluster_' + c + ' {\\n");\n';
		code += '\tSystem.out.println("\\t\\tlabel=\\"' + c + '\\";\\n");\n';
		code += '\tSystem.out.println("\\t\\tcolor=blue;\\n");\n';

		for (var m in methods[c]) {
			code += '\tSystem.out.println("\\t\\t' + c + '_' + methods[c][m] + ' [label=\\"' + methods[c][m] + '\\"]' + '\\n");\n';
			
		}
		code += '\tSystem.out.println("\\t}\\n");\n';
		
	}

	for(var c in apis) {

		code += '\tSystem.out.println("\\tsubgraph cluster_' + c + ' {\\n");\n';
		code += '\tSystem.out.println("\\t\\tlabel=\\"' + c + '\\";\\n");\n';
		code += '\tSystem.out.println("\\t\\tcolor=gray;\\n");\n';

		for (var m in apis[c]) {
			code += '\tSystem.out.println("\\t\\t' + c + '_' + m + ' [label=\\"' + m + '\\"]' + '\\n");\n';
			
		}
		code += '\tSystem.out.println("\\t}\\n");\n';
		
		
	}
	
	
	for( var m in obj){
		
		for( var c in obj[m]){
			code+='\tvalue = '+monitor.get(obj[m][c])+'\n';
			code+= '\tSystem.out.println("'+m+'->'+c+' [label=\\"\"+value+\"\\"]\\n");\n';
		}
	}
	code += '\tSystem.out.println("}");\n';
end

/**** COUNTER MONITOR ****/

/**
	Monitor the occurences of a given join point;
*/
aspectdef CountingMonitorList
	input
		$targetClass,
		monitorPackage = DEFAULT_PACKAGE
	end
	output 
		name,
		increment,
		get,
		reset,
		init
	end
	static
		var DEFAULT_PACKAGE = "pt.up.fe.specs.lara.kadabra.utils";
		var CLASS_NAME = "CountingMonitorList";
	end

	call getter: GetCountingMonitorList(monitorPackage, CLASS_NAME);
	$monitor = getter.$monitor;
//	$monitor = {name: "CountingMonitorList", qualifiedName: "org.lara.CountingMonitorList"};
	name = "kadabra"+$monitor.name;
	

	var counter = 0;
	select $targetClass.field{name == name+counter} end
	apply
		counter++;
	end

	function callMethod(method,arg){
		return name+"."+method+"("+arg+");";
	}
	
	name+=counter;
	get = function(id){
		return callMethod("get",id);
	};
	reset = function(id){
		return callMethod("reset",id);
	};
	increment = function(id){
		return callMethod("increment",id);
	};
	init = function(size){
		var modifiers = ["private", "static"];
		$targetClass.exec newField(modifiers, $monitor.qualifiedName, name, "new "+$monitor.name+"("+size+")");
	};
end

/**
	Returns the counting monitor list. if it does not exist creates a new class
*/
aspectdef GetCountingMonitorList
	input 
		package,
		simpleName
	end
	output $monitor end
	
	select file.class{(name==simpleName, package==package)} end
	apply
		$monitor = $class;
		return;
	end
	call generator: NewCountingMonitorList(package, simpleName);
	$monitor = generator.$monitorClass;
end


aspectdef NewCountingMonitorList
	input 
		package,
		simpleName
	end
	output
		$monitorClass
	end

	className = package + "." + simpleName;
//	println("New Monitoring Class");
	select app end
	apply
		exec newClass(className,null,null);
	end

//	println("Adding fields");
	select file.class{name==simpleName} end
	apply
		$monitorClass = $class;
		exec newField(["private"], "int[]","counter",null);
		exec newConstructor(["public"], [new Pair("int", "size")]);
		exec newMethod(["public"], "void","increment",[new Pair("int", "id")]);
		exec newMethod(["public"], "int","get",[new Pair("int", "id")]);
		exec newMethod(["public"], "void","reset",[new Pair("int", "id")]);
	end

//	println("Adding increment");
	select file.class{name==simpleName}.method{"increment"}.body end
	apply
		insert replace 'counter[id]++;';
	end
//	println("Adding getValue");
	select file.class{name==simpleName}.method{"get"}.body end
	apply
		insert replace 'return counter[id];';
	end
//	println("Adding reset");
	select file.class{name==simpleName}.method{"reset"}.body end
	apply
		insert replace 'counter[id] = 0;';
	end
	select file.class{name==simpleName}.constructor.body end
	apply
		insert replace 'counter = new int[size];';
	end
end


/**** UTILS ****/
aspectdef BeforeExit
	input $method, code end
	var inserted = false;

	//Try to insert before returns
	select $method.body.return end
	apply
		insert before '[[code]]';
		inserted = true;
	end
	if(inserted){
		return;
	}
	
	//Try to insert after last stmt (void methods)
	select $method.body.lastStmt end
	apply
		insert after '[[code]]';
		inserted = true;
	end
	if(inserted){
		return;
	}

	//Else, is an empty method
	select $method.body end
	apply
		replace '[[code]]';
	end
end