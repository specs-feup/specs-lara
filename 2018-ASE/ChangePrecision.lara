aspectdef ChangePrecision

	input $func, $oldType, $newType end

	//println("Func before:" + $func.code);
	/* change type of variable declarations found
	 *  inside the function and parameters */
	select $func.decl end
	apply

		/*
		if($func.name === "matrix_mult_call_specialization_0_f") {
			if($decl.joinPointType === "param") {
				println("Decl before: " + $decl.code);
				println("Decl type before: " + $decl.type.fieldTree);
			}
		}
		*/
		
		//println("Decl type: " + $decl.joinPointType);
		changeJpType($decl, $oldType, $newType);

		// If decl has initialization, change types in initialization expression
		if($decl.hasInit) {
			$initExpr = $decl.init;

			for(var $descendantExpr of $initExpr.descendantsAndSelf("expression")) {				
				changeJpType($descendantExpr, $oldType, $newType);
				
			}
		}

		/*
		if($func.name === "matrix_mult_call_specialization_0_f") {
			if($decl.joinPointType === "param") {
				println("Decl after: " + $decl.code);
				println("Decl type after: " + $decl.type.fieldTree);
			}
		}
		*/
		
	end
	//println("Func after:" + $func.code);

	
	/* do the same with the function return type ... */
	var $returnType = $func.functionType.returnType;
	//var $changedReturnType = changeType($returnType, $oldType, $newType);
	//var $changedReturnType = changeTypeV2($returnType, $oldType, $newType);
	var $changedReturnType = $returnType.setUnderlyingType($oldType, $newType);
	
	$func.functionType.def returnType = $changedReturnType;
	
	
end

function changeJpType($jp, $oldType, $newType) {
	
	if($jp.type === undefined) {
		return;
	}

	//var changedType = changeType($jp.type, $oldType, $newType);
	//var changedType = changeTypeV2($jp.type, $oldType, $newType);
	var changedType = $jp.type.setUnderlyingType($oldType, $newType);
	$jp.def type = changedType;
	
	// Special case: sizeof
	if($jp.instanceOf("unaryExprOrType") && $jp.kind === "sizeof") {
		if($jp.argType.equals($oldType)) {
			$jp.def argType = $newType;
		}
	}
	
}


function changeType($targetType, $oldType, $newType) {

	/* Replace target type */
	if($targetType.equals($oldType)) {
		return $newType;
	}
	
	/* Get underlying type*/
	var underlyingType = getUnderlyingType($targetType);
	if($targetType.joinPointType === "adjustedType") {
		println("Underlying of decayed: " + underlyingType.ast);
	}
	/* If no underlying type, just return type*/
	if(underlyingType === undefined) {
		return $targetType;
	}
	
	/* Apply change to underlying type */
	var changedUnderlying = changeType(underlyingType, $oldType, $newType);
	
	
	/* Update if there are changes */
	if(!changedUnderlying.equals(underlyingType)) {
		// Copy target type
		$targetTypeCopy = $targetType.copy();

		//$targetTypeCopy.setFieldRecursive(currentValue, newValue);
		//println("TArget copy before:" + $targetTypeCopy.code);
		// Change all fields that have underlying type
		var trySettingField = true;
		while(trySettingField) {
			trySettingField = $targetTypeCopy.setTypeFieldByValueRecursive(underlyingType, changedUnderlying);
		}
		//println("TArget copy after:" + $targetTypeCopy.code);
		
	
		// TODO: Replace with a $targetTypeCopy.find(underlyingType) attribute?
	/*
		var underlyingTypeCopy = undefined;
		println("Underlyng type:" + underlyingType.code);
		for(var $typeField of $targetTypeCopy.typeFields) {
			println("TypeField: " + $typeField.code);
			//if($typeField.compareNodes(underlyingType)) {
			if($typeField.equals(underlyingType)) {			
				println("Is equal!");
			} else {
				println("Not equal");
			}
		}
		
		for(var $descendant of $targetTypeCopy.descendants) {
			if($descendant.equals(underlyingType)) {
				underlyingTypeCopy = $descendant;
				break;
			}
		}
	
		if(underlyingTypeCopy === undefined) {
			throw "Could not find corresponding underlying type";
		}
		
		underlyingTypeCopy.replaceWith(changedUnderlying);
		*/
		$targetType = $targetTypeCopy;
		//underlyingType.replaceWith(changedUnderlying);
	}
	
	return $targetType;
}


function changeTypeV2($targetType, $oldType, $newType) {

	// If target type already is old type, replace it immediatly 
	if($targetType.equals($oldType)) {
		return $newType;
	}

	// Create copy and set type fields of type
	var $targetTypeCopy = $targetType.copy();
	var trySettingField = true;

	if($targetType.joinPointType === "adjustedType") {
		println("Adjusted type begin");
		//println("Original field tree:");
		//println($targetType.fieldTree);
	}
	
	while(trySettingField) {
		trySettingField = $targetTypeCopy.setTypeFieldByValueRecursive($oldType, $newType);
/*
		if($targetType.joinPointType === "adjustedType") {
			println("Changed field::");
			println($targetTypeCopy.fieldTree);		
		}
*/		
	}
	if($targetType.joinPointType === "adjustedType") {
		println("Adjusted type end");
	}
	return $targetTypeCopy;
}

/*
function changeTypeV3($targetType, $oldType, $newType) {

	// If target type already is old type, replace it immediatly 
	if($targetType.equals($oldType)) {
		return $newType;
	}

	// Create copy and set type fields of type
	var $targetTypeCopy = $targetType.copy();
	var trySettingField = true;
	while(trySettingField) {
		trySettingField = $targetTypeCopy.setTypeFieldByValueRecursive($oldType, $newType);
	}

	return $targetTypeCopy;
}
*/

function getUnderlyingType($type) {
	if($type.hasSugar) {
		return $type.desugar;
	}
	
	if($type.isPointer) {
		return $type.pointee;
	}
	
	if($type.isArray) {
		//println("Element type: " + $type.elementType.ast);
		//return getUnderlyingType($type.elementType);
		return $type.elementType;
	}
	
	if($type.joinPointType === "qualType") {
		return $type.unqualifiedType;
	}

	if($type.joinPointType === "adjustedType") {
		return $type.getOriginalType;
		//return getUnderlyingType($type.getOriginalType);
	}


	return undefined;
}
