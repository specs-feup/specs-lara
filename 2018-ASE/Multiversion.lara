import CreateFloatVersion;
import lara.code.Timer;
import clava.ClavaJoinPoints;

 var $double = ClavaJoinPoints.builtinType("double");
 var $float = ClavaJoinPoints.builtinType("float");

aspectdef Multiversion
	input $call, knobName end
	
	if($call.definition === undefined) {
		println("Could not find definition for call '"+$call.name+"'@"+$call.location);
		return;
	}
	
	if(!$call.isStmtCall) {
		println("Statement must be composed only by the call: '"+$call.name+"'@"+$call.location);
		return;
	}

	
	call fVersion : CreateFloatVersion($call.definition, "_f");
	var $floatFunc = fVersion.$clonedFunc;
	
	var timer = new Timer();

	/* Create call based on float version of function */
	$floatFunc.exec $floatCall : newCall([]);
	//$floatCall = $floatFunc.newCall([]);

	// copy current call
	$call.exec $callCopy : copy();
	//$callCopy = $call.copy();
	
	var $condition = ClavaJoinPoints.exprLiteral(knobName);
	call switchJp : CreateSwitch($condition, {0: $callCopy, 1: $floatCall});
			
	// Get stmt of the call
	var $stmt = $call.ancestor("statement");
			
	$stmt.exec replaceWith(switchJp.$switch);

	timer.time($callCopy, "Original time:");
	timer.time($floatCall, "Float time:");
	
end


aspectdef CreateSwitch
	input
		$condition, switchCases
	end

	output
		$switch
	end
		
	var cases = [];
	for(key in switchCases) {
		cases.push(ClavaJoinPoints.exprLiteral(key));
		cases.push(switchCases[key]);
	}
	
	$switch = ClavaJoinPoints.switchStmt($condition, cases);
	
end

