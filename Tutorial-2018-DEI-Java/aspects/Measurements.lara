aspectdef Measurements
	//1. Add fields to measure the time and the exchanges
	call AddFields();
	
	//2. Increment exchanges when quicksort method is called
	call ExchangeCounter();
	
	//3. Start timer before calls to sort method
	//4. Stop timer after the calls and print the time and exchanges
	call Timer();
end

//1. Add fields to measure the time and the exchanges
aspectdef AddFields
	select class{"Quicksort"} end
	apply
		$class.exec newField(["public", "static"], "int", "exchangeCount");
	end
	select class{"SortApplication"} end
	apply
		$class.exec newField(["private", "static"], "int", "sortStarted");
		$class.exec newField(["private", "static"], "int", "sortEnded");
	end
end

//2. Increment exchanges when quicksort method is called
aspectdef ExchangeCounter
	
	select call{"sort"} end
	apply
		insert before "Quicksort.exchangeCount = 0;";
	end
	select call{"exchange"} end
	apply
		insert before "exchangeCount++;";
	end
end

aspectdef Timer
	select class.call{"sort"} end
	apply
		//3. Start timer before calls to sort method
		insert before%{
			sortStarted = (int) (new java.util.Date().getTime());
		}%;
		//4. Stop timer after the calls and print the time and exchanges
		insert after%{
			sortEnded = (int) (new java.util.Date().getTime());
			System.out.println("Sort of " + values.length + 
	    			" elements took " + ((sortEnded - sortStarted)/1000f) + 
	    			"s and made " + Quicksort.exchangeCount + " calls to exchange()");
		}%;
	end
end