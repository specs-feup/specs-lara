/*      Ricardo Nobre                                   *
 *      Departamento de Engenharia InformÃ¡tica          *
 *      FEUP, Porto, Portugal                           *
 *      ricardo.nobre@fe.up.pt                          */

import DseRun;
import DseAlgo;
import CleanSequence;

aspectdef DseStart
	input
		sourceFile="", maxSeqWidth=64, numExecutions=1, maxIterations=1000, compilerName="", targetName="", metricName="", nr=-1, cleaningMethod=0, passes="", cleaningPercentTolerance=0, aditionalflags="", larad_path="/opt/larad";
	end

	// SETUP OF LARA ENVIRONMENT
	default_verbose_level = 0;
	pipe = null;

	// Sets random seed so that experiments are reproducible
	Math.seedrandom('specs');

	var minimumLat = 1;	// This is not being used anymore, althougt it will stay because it may be usefull in future

	var compiler_config_jsonObj = fileToJSON(larad_path + "/targets/" + targetName + "/" + compilerName + "/compiler_config.json");
	
	var exporterName = compiler_config_jsonObj.exporter_name;
	var passesFile = larad_path + "/compilers/" + compilerName + "/" + compiler_config_jsonObj.passes;

	if(passes != "") {		// if the user passes as parameter the full path to a JSON file, then it is used instead of the default one 
		passesFile = passes;
	}
	var dse_params_jsonObj = fileToJSON(passesFile);

	var exploreParams = dse_params_jsonObj;

	var sequences = [];

	DseRun.startup(sourceFile, targetName, metricName, compiler_config_jsonObj, compilerName, numExecutions, aditionalflags, larad_path);

	// INSERT INSTRUMENTATION CODE AND GENERATE IR (e.g., C -> LLVM Assembly)
	DseRun.cleanAll();
	DseRun.instrumentCode();
	DseRun.frontend();

	println("\n--------------------- DSE CONFIGURATION ------------------------");
	println(" target: " + targetName + ", " + "compiler: " + compilerName + ", " + "metric: " + metricName + " (" + compiler_config_jsonObj.exporter_name[metricName][1] + ")");
	println("----------------------------------------------------------------\n");
	println("Collecting fitness values for default optimization levels..."); // (in " + "CORRECT_THIS" + ")...");

	var referenceConfigs_jsonObj = fileToJSON(larad_path + "/compilers/" + compilerName + "/referenceConfigs.json");

	var referenceConfigsNames = referenceConfigs_jsonObj.referenceNames;
	var referenceConfigs = referenceConfigs_jsonObj.referenceConfigs;

	var referenceConfigsFitness = [];

	var bestOfAll = DseRun.getWorsePossibleFitness();
	
	// Save, print, and determine best fitness of all reference optimization configurations
	for(var i=0; i < referenceConfigsNames.length; i++) {
		var optimLevel = referenceConfigs[i];
		referenceConfigsFitness[i] = DseRun.compile_execute_and_report( [ optimLevel ] );
		println("\t" + referenceConfigsNames[i] + ": " + referenceConfigsFitness[i]);
		if(DseRun.isLeftFitnessBetterOrEqualThanRightFitness(referenceConfigsFitness[i], bestOfAll) == true) {
			bestOfAll = referenceConfigsFitness[i];
		}
	}

	
	var startTime = (new Date()).getTime() / 1000.0;   // 'getTime()' gets time in miliseconds, so conversion to seconds is needed

	DseRun.resetStepCounter();	// it is important to call this because the step counter will be >=1 at this point if there was any compilation before (e.g., using the standard optimization levels)
	call DseAlgo : DseAlgo(exploreParams, maxIterations, maxSeqWidth, referenceConfigsFitness, sequences, nr);

	var totalTime = ((new Date()).getTime() / 1000.0) - startTime;
	var numIterationsProcessed = DseRun.getStepCounter();

	println("\t" + "Best Solution (before cleaning)\t : " + DseRun.getBestSolutionFitness() + "\t : " + DseRun.getBestSolutionConfig().join(" ") + "");

	if(cleaningMethod != 0) {
		println("\n------------------------ CLEANING ------------------------------");
		println(" method: " + cleaningMethod + ", " + "tolerance(%): " + cleaningPercentTolerance);
		println("----------------------------------------------------------------\n");


		println("Cleaning best solution found..."); // (in " + "CORRECT_THIS" + ")...");

		// Call sequence cleaner twice with the same parameters

		println("First pass...");	
		call CleanSequence(cleaningMethod, cleaningPercentTolerance);

		println("Second pass...");	//TODO: call only if sequence is not empty
		call CleanSequence(cleaningMethod, cleaningPercentTolerance);

	}
	
	DseRun.cleanAll();

	println("\nBest Solution (after cleaning)...");
	println("\tSequence : " + DseRun.getBestSolutionConfig().join(" "));
	println("\tLatency  : " + DseRun.getBestSolutionFitness().toFixed(0));


	println("\nSpeedup Over Reference Configurations...");

	var bestSolutionFitness = DseRun.getBestSolutionFitness();
	if(DseRun.isLeftFitnessBetterOrEqualThanRightFitness(bestSolutionFitness, bestOfAll) == true) {
		bestOfAll = bestSolutionFitness;
	}

	var overBestReferenceConfig = DseRun.getWorsePossibleFitness();
	var bestOfAllOverBestReferenceConfig = DseRun.getWorsePossibleFitness();
	
	for(var i=0; i < referenceConfigsNames.length; i++) {
		var overReferenceConfig = referenceConfigsFitness[i] / DseRun.getBestSolutionFitness();
		println("\tOver " + referenceConfigsNames[i] + " : " + overReferenceConfig.toFixed(3));
		//var overReferenceConfigIncludingThem = referenceConfigsFitness[i] / bestOfAll;
		//println("\tOver " + referenceConfigsNames[i] + " [including reference configs] : " + overReferenceConfigIncludingThem.toFixed(3));
		if(((referenceConfigsFitness[i] / DseRun.getBestSolutionFitness()).toFixed(3)) < overBestReferenceConfig) {
			overBestReferenceConfig = (referenceConfigsFitness[i] / DseRun.getBestSolutionFitness()).toFixed(3);
		}
		if(((referenceConfigsFitness[i] / bestOfAll).toFixed(3)) < bestOfAllOverBestReferenceConfig) {
                        bestOfAllOverBestReferenceConfig = (referenceConfigsFitness[i] / bestOfAll).toFixed(3);
        }

	}

	println("\tImprovement Over -Ox : " + overBestReferenceConfig.toFixed(3));	// -Ox represents the best standard optimization level for the particular function/program being optimized
	// println("\tOver -Ox [including reference configs] : " + bestOfAllOverBestReferenceConfig);


	println("\nDesign Space Exploration Execution Stats...");
	println("\tNumber Of DSE Iterations Processed : " + numIterationsProcessed);
	println("\tExploration Time (in seconds) : " + totalTime.toFixed(3));

	println("\tNumber of Binaries Generated :" + DseRun.getNumSavedExecutions());	// Prints number of executions that were avoided by recalling previous executions of identical binary	
	println("\tNumber of Binaries Saved From Testing :" + DseRun.getNumSavedExecutions());	// Prints number of executions that were avoided by recalling previous executions of identical binary

	// writeFile("./"+sourceFile+".seq", cleanseq.bestSeq.join(", "));	// Save the best sequence
	// writeFile("./"+sourceFile+".speed", (cleanseq.bestSeqFitness.toFixed(0) * overBestReferenceConfig) + ";" + cleanseq.bestSeqFitness.toFixed(0) + ";" + overBestReferenceConfig.toFixed(6)); // Save fitness result
	// writeFile("./"+sourceFile+".temp", totalTime.toFixed(3)); // Save exploration time

end
