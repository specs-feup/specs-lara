import antarex.margot.MargotConfig;

aspectdef XmlConfig

	var config = new MargotConfig();
	var matmul = config.newBlock('matmul');

	/* monitors */
	var timeMonitor = matmul.newTimeMonitor('timer');
	timeMonitor.useMilli();
	timeMonitor.expose('mean_exec_time', MargotExpose.AVG);

	/* knobs */
	matmul.addKnob('block_size_1', 'BS1', 'int');
	matmul.addKnob('block_size_2', 'BS2', 'int');

	/* metrics */
	matmul.addMetric('exec_time_ms', 'int', MargotDistribution.YES);

	/* runtime */
	matmul.addRuntimeProvider('exec_time_ms', 'timer', 1);

	/* goals */
	matmul.addMetricGoal('exec_time_lower_bound', MargotCFun.LT, 2, 'exec_time_ms');

	/* states */
	var state = matmul.newState('my_optimizatioin');
	state.setStarting(true);
	state.minimize('exec_time_ms', MargotCombination.SIMPLE, 1.0);
	state.subjectTo('exec_time_lower_bound', 3, 30);

	println(config.build());


	var dseInfo = config.getDseInfo('matmul');

	println('knobs:');
	for(knob of dseInfo.getKnobs()) {
		println(knob.getName() + ' in code: ' + knob.getVarType() + ' ' + knob.getVarName());
	}

	println('metrics:');
	for(metric of dseInfo.getMargotMetrics()) {
		print(metric.getName() + ' in ' + metric.getUnitName());
	}
end