import antarex.margot.MargotConfig;

aspectdef McAutoConfig

	println("Starting Monte Carlo Autotuner config generation");

	var config = new MargotConfig();
	var travel = config.newBlock('travel');

	/* Monitor section */
	var tm = travel.newTimeMonitor('my_elapsed_time_monitor');
	tm.expose('avg_computation_time', MargotExpose.AVG);
	tm.useMicro();

	var em = travel.newEnergyMonitor('my_energy_monitor');
	em.expose('avg_energy', MargotExpose.AVG);
	em.setDomain(MargotEnergyDomain.PACKAGE);

	var tpm = travel.newThroughputMonitor('my_throughput_monitor', 'num_segment', 'int');
	tpm.expose('avg_throughput', MargotExpose.AVG);



	/* Goal section */
	travel.addMetricGoal('my_error_goal', MargotCFun.LESS_EQUAL, 0.03, 'my_error');
	travel.addKnobGoal('my_predictability_goal', MargotCFun.GREATER_EQUAL, 1.0, 'unpredictability');
	travel.addMonitorGoal('goal_name', MargotCFun.GREATER_THAN, 1.0, 'monitor_name', MargotDFun.MAX);



	/* Knobs section */
	travel.addKnob('num_threads', 'num_threads', 'int');
	travel.addKnob('num_samples', 'samples', 'int');
	travel.addKnob('unpredictability', 'unpredictability', 'float');



	/* Optimization / State section  */
	var problem = travel.newState('problem');
	problem.setStarting();

	problem.subjectTo('my_predictability_goal', '', 10);
	problem.subjectTo('my_error_goal', '', 9);

	problem.maximize('measured_throughput', MargotCombination.LINEAR, 1.0);


	
	/* Config code generation */
	println(config.build());
	
	println("Monte Carlo Autotuner config generation done!");
end