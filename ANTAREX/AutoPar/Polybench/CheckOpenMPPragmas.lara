import lara.Io;
import lara.Check;

aspectdef CheckOpenMPPragmas
	input expectedCodeFile end

	
	select pragma{"omp"}.target end
	apply
		// Comment OpenMP pragmas that are inside a loop that already has an OpenMP pragma
		if($target.instanceOf("loop")) {
		    
		    if(!hasForAncestorWithOmp($target)) {
		        continue;
		    }
		    
	    	$pragma.insert replace "// " + $pragma.code;
		}
	end

	
	var currentCode = "<not initialized>";
	select file end
	apply
		currentCode = $file.code;
		break;
	end

	var generateOutputs = true;
	
	if(generateOutputs) {
		writeFile(expectedCodeFile, currentCode);
	} else {
		var expectedCode = Io.readFile(expectedCodeFile);
		if(expectedCode === null) {
			expectedCode = "Could not find file '" + expectedCodeFile + "'";
		}
		
		Check.strings(currentCode, expectedCode);	
	}
	

end

function hasForAncestorWithOmp($target) {
    
    // Find ancestor that is a loop
    $loopParent = $target.ancestor('loop');
		    
	// No loop parent found, return
	if($loopParent === undefined) {
	    return false;
    }
		    
    // Check if parent has an OpenMP pragma
    for(var $parentPragma of $loopParent.pragmas) {
        // Found OpenMP pragma, return
        if($parentPragma.name === "omp") {
            return true;
        }		        
    }

    // No OpenMP pragma found, check parent for
    return hasForAncestorWithOmp($loopParent);
}
