/**
 * This class represents an optimization state of the autotuner execution.
 * 
 * By default, metrics are combined with MargotCombination.SIMPLE.
 * */
function MargotState(name, starting) {
    
    this._name = name;
    
    this._starting = starting;
    if(this._starting === undefined) {
        this._starting = false;
    }
    
    this._subjects = [];
    
    this._minCombination = MargotCombination.SIMPLE;
    this._minimizes = [];
    this._maxCombination = MargotCombination.SIMPLE;
    this._maximizes = [];
}

/**
 * Enum for the possible combination of the optimizations.
 * */
var MargotCombination = new Enumeration('LINEAR', 'SIMPLE', 'GEOMETRIC');

/**
 * Sets the combination for the metrics that will be minimized.
 * 
 * @param {MargotCombination} combination - the combination kind
 * */
MargotState.prototype.setMinimizeCombination = function(combination) {
	this._minCombination = combination;
}

/**
 * Sets the combination for the metrics that will be maximized.
 * 
 * @param {MargotCombination} combination - the combination kind
 * */
MargotState.prototype.setMaximizeCombination = function(combination) {
	this._maxCombination = combination;
}

/**
 * Sets whether this is the starting state or not.
 * */
MargotState.prototype.setStarting = function(starting) {
    
    this._starting = starting;
    if(this._starting === undefined) {
        this._starting = true;
    }
}

/**
 * Adds a constraint to the state.
 * */
MargotState.prototype.subjectTo = function(goalName, confidence, priority) {
    
    this._subjects.push({goalName: goalName, confidence: confidence, priority: priority});
}

/**
 * Adds a metric for the optimization to minimize.
 * */
MargotState.prototype.minimize = function(metricName, coefficient) {
    
    this._minimizes.push({metricName: metricName, coefficient: coefficient});
}

/**
 * Adds a metric for the optimization to maximize.
 * */
MargotState.prototype.maximize = function(metricName, coefficient) {
    
    this._maximizes.push({metricName: metricName, coefficient: coefficient});
}

/*
 * CODE GENERATION
 * ****************************************************************************/

/**
 * Makes the code for the state.
 * */
MargotState.prototype._makeCode = function () {
    
    var minimizesCode = '';
    if(this._minimizes.length > 0) {
		minimizesCode = this._makeMinMaxCode('minimize', this._minCombination, this._minimizes);
	}
	var maximizesCode = '';
	if(this._maximizes.length > 0) {
		maximizesCode = this._makeMinMaxCode('maximize', this._maxCombination, this._maximizes);
	}
	
    var subjectCode = this._makeSubjectsCode();
    
    return _StateTemplate(this._name, this._starting ? 'yes' : 'no', minimizesCode, maximizesCode, subjectCode);
}

/**
 * Makes the code for the minimizes and maximizes lists.
 * */
MargotState.prototype._makeMinMaxCode = function(kind, combination, list) {
    
    var metricsCode = '';
    
    for(var element of list) {
        metricsCode += _MinMaxMetricTemplate(element.metricName, element.coefficient);
    }
    
    return _MinMaxTemplate(kind, combination, metricsCode);
}

/**
 * Makes the code for the constraints of a state.
 * */
MargotState.prototype._makeSubjectsCode = function () {
    
    var code = '';
    
    for(var subject of this._subjects) {
        
        code += _SubjectTemplate(subject.goalName, subject.confidence, subject.priority);
    }
    
    return code;
}

/*
 * TEMPLATES
 * ****************************************************************************/

/**
 * Template for the state XML code.
 * */
 codedef _StateTemplate(name, starting, minimizesCode, maximizesCode, subjectCode) %{
<state name="[[name]]" starting="[[starting]]">    
[[minimizesCode]]
[[maximizesCode]]
[[subjectCode]]  
</state> 
}%
end

/**
 * Template for the minimizes and maximizes XML code.
 * */
 codedef _MinMaxTemplate(kind, combination, metricsCode) %{
<[[kind]] combination="[[combination]]">    
[[metricsCode]]   
</[[kind]]>
}%
end

/**
 * Template for the minimizes and maximizes XML code.
 * */
codedef _MinMaxMetricTemplate(metricName, coefficient) %{
<metric name="[[metricName]]" coef="[[coefficient]]"/>  
}%
end

/**
 * Template for the constraint XML code.
 * */
 codedef _SubjectTemplate(goalName, confidence, priority) %{
<subject to="[[goalName]]" confidence="[[confidence]]" priority="[[priority]]" />
}%
end
