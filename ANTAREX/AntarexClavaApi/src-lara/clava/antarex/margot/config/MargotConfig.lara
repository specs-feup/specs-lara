import antarex.margot.config.MargotBlock;

import antarex.margot.dse.MargotDseInfo;
import antarex.margot.codegen.MargotCodeGen;


/**
 * This class holds the data needed to generate an XML configuration file for the autotuner.
 * */
function MargotConfig() {
    
    this._blocks = {};
}

/**
* Adds the provided block to the list of blocks.
* */
MargotConfig.prototype.addBlock = function(block) {

    this._blocks[block._name] = block;
}

/**
* Builds a block, adds it to the list of blocks, and returns it.
* */
MargotConfig.prototype.newBlock = function(blockName) {

    var block = new MargotBlock(blockName);
    this._blocks[blockName] = block;
    
    return block;
}

/**
 * Generates and returns the DSE information for the block with the provided name.
 * 
 * @param {String} blockName - the name of the block for which the DSE info will be returned.
 * @returns {MargotDseInfo} an object with the DSE information
 * */
MargotConfig.prototype.getDseInfo = function(blockName) {
	
	var block = this._blocks[blockName];
	if(block === undefined) {
		throw 'Could not find a block with name ' + blockName;
	}
	
	var info = new MargotDseInfo(blockName);
	
	// knobs
	var knobs = {};
	for(var knob of block._knobs) {
		knobs[knob.getName()] = knob;
	}
	info.setKnobs(knobs);
	
	// data features
	//~ var features = {};
	//~ for(var feature of block._features) {
		//~ features[feature.getFeatureName()] = feature;
	//~ }
	//~ info.setFeatures(features);
	
	// metrics
	var metrics = [];
	for(var monitor of block._monitors) {
		metrics.push(monitor.getMargotMetric());
	}
	info.setMargotMetrics(metrics);
	
	return info;
}

/**
 * Generates and returns the code generation information needed for block with provided name.
 * 
 * @param {String} blockName - the name of the block for which the code generation infor will be returned
 * 
 * @returns {Margot} and object with the code generation information
 * */
MargotConfig.prototype.getCodeGenInfo = function(blockName) {
	
	var block = this._blocks[blockName];
	if(block === undefined) {
		throw 'Could not find a block with name ' + blockName;
	}
	
	var codegen = new Margot(blockName);
	
	// knobs
	var knobNames = [];
	for(var knob of block._knobs) {
		knobNames.push(knob.getVarName()); // code generation needs the names of the code variables
	}
	codegen.setKnobs(knobNames);
	
	// features
	var featureNames = [];
	for(var feature of block._features.getFeatures()) {
		featureNames.push(feature.getName());
	}
	codegen.setFeatures(featureNames);
	
	return codegen;
}

/*
 * CODE GENERATION
 * ****************************************************************************/

/**
* Generates the code and writes it to the file, if a file path is provided.
* */
MargotConfig.prototype.build = function(filepath) {
 
    var code = '<margot>\n';
    
    code += this._makeBlocksCode();

    code += '</margot>';

    if(filepath !== undefined) {
        println('Writing configuration to ' + filepath);
        writeFile(filepath, code);
    }

    return code;
}

/**
* Generates the code for all blocks.
* */
MargotConfig.prototype._makeBlocksCode = function() {

    var code = "";

    for(var block of this._blocks) {
        
        code += block._makeCode();
    }

    return code;
}
