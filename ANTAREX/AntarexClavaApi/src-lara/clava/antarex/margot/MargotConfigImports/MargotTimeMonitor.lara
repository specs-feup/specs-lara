/**
 * This class represents a time monitor.
 * */
function TimeMonitor(name) {
    
    this._base = new _MargotMonitor(name);
    this._granularity = MargotTimeMeasure.MICRO; // default, can be changed
}

/**
 * Adds a variable to expose in the time monitor.
 * */
TimeMonitor.prototype.expose = function(varName, what) {
    this._base._expose(varName, what);
}

/**
 * Enum that represents the granularity of the time monitor.
 * */
var MargotTimeMeasure = new Enumeration(
    {SEC: 'margot::TimeMeasure::Seconds'},
    {MILI: 'margot::TimeMeasure::Miliseconds'},
    {MICRO: 'margot::TimeMeasure::Microseconds'}
);

/**
 * Set the granularity to microseconds.
 * */
TimeMonitor.prototype.useMicro = function() {
    
    this._granularity = MargotTimeMeasure.MICRO;
}

/**
 * Set the granularity to miliseconds.
 * */
TimeMonitor.prototype.useMili = function() {
    
    this._granularity = MargotTimeMeasure.MILI;
}

/**
 * Set the granularity to seconds.
 * */
TimeMonitor.prototype.useSecond = function() {
    
    this._granularity = MargotTimeMeasure.SEC;
}

/*
 * CODE GENERATION
 * ****************************************************************************/

/**
 * Makes the code of the time monitor using the base monitor.
 * */
TimeMonitor.prototype._makeCode = function() {
    
    var creationCode = this._makeGranularityCode();
    return this._base._makeCode('Time', creationCode);
}

/**
 * Make the code for the granularity parameter.
 * */
TimeMonitor.prototype._makeGranularityCode = function() {
    
    return _GranularityTemplate(this._granularity);
}

/*
 * TEMPLATES
 * ****************************************************************************/

/**
 * Template used for the generation of the XML code for the granularity portion of the time monitor.
 * */
codedef _GranularityTemplate(param1) %{
<creation>    
<param name="time granularity">    
<fixed value="[[param1]]"/>    
</param>    
</creation>
}%
end
