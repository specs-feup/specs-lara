import antarex.margot.MargotConfigImports.MargotMonitor;
import lara.units.TimeUnit;
import lara.units.TimeModifier;

/**
 * This class represents a time monitor.
 * 
 * @extends _MargotMonitor
 * */
function TimeMonitor(name) {
    
    // super contructor
    _MargotMonitor.call(this, name);
    
    // save super prototype
    this._super = _MargotMonitor.prototype;
    
    // default granularity, can be changed
    this._granularity = MargotTimeMeasure.MICRO;
    
    // default matric, the unit can be changed
    this._margotMetric = new MargotMetric(MargotMetricName.TIME, new TimeUnit('s', TimeModifier.MICRO));
}
// Inheritance
TimeMonitor.prototype = Object.create(_MargotMonitor.prototype);

/**
 * Enum that represents the granularity of the time monitor.
 * */
var MargotTimeMeasure = new Enumeration(
    {SEC: 'margot::TimeMeasure::Seconds'},
    {MILLI: 'margot::TimeMeasure::Miliseconds'}, // TODO: check if this is the correct spelling used in mARGOt
    {MICRO: 'margot::TimeMeasure::Microseconds'}
);

/**
 * Set the granularity to microseconds.
 * */
TimeMonitor.prototype.useMicro = function() {
    
    this._granularity = MargotTimeMeasure.MICRO;
    
    // change the unit of the metric
    this._margotMetric.setUnit(new TimeUnit('s', TimeModifier.MICRO));
}

/**
 * Set the granularity to miliseconds.
 * */
TimeMonitor.prototype.useMilli = function() {
    
    this._granularity = MargotTimeMeasure.MILLI;
    
    // change the unit of the metric
    this._margotMetric.setUnit(new TimeUnit('s', TimeModifier.MILLI));
}

/**
 * Set the granularity to seconds.
 * */
TimeMonitor.prototype.useSecond = function() {
    
    this._granularity = MargotTimeMeasure.SEC;
    
    // change the unit of the metric
    this._margotMetric.setUnit(new TimeUnit('s', TimeModifier.SECOND));
}

/*
 * CODE GENERATION
 * ****************************************************************************/

/**
 * Makes the code of the time monitor using the base monitor.
 * */
TimeMonitor.prototype._makeCode = function() {
    
    var granularityCode = _GranularityTemplate(this._granularity);
        
    return this._super._makeCode.call(this, 'TIME', granularityCode);
}

/*
 * TEMPLATES
 * ****************************************************************************/

/**
 * Template used for the generation of the XML code for the granularity portion of the time monitor.
 * */
codedef _GranularityTemplate(param1) %{
<creation>    
<param name="time granularity">    
<fixed value="[[param1]]"/>    
</param>    
</creation>
}%
end
