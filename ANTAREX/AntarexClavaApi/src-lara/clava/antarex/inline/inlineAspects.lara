import antarex.utils.lowLevelFuncs;

var $INLINE_PRAGMA="INLINE";
var $ID_INLINE_PRAGMA="INRIA_INLINE_";
var $CPT_INLINE=-1;
var $CURRENT_ID_INLINE;


aspectdef inline 
 var $externDecls;
 var found=false;
 // First step.
 select pragma end
  apply
    if (isInlinePragma($pragma)) {
      found = true;
      var $target = $pragma.target;
      if ($target.isInline)
        println($target.getName() + " is already inlined !!!");
      else if ( inlineObject($target) )	{
      	  println(" inline of < " + $target.getName() + ", file =" + $target.ancestor("file").name + " > is managed by the symbol: " + $CURRENT_ID_INLINE);
      	  $pragma.detach();
      }
      else 
      	ERROR(" The pragma " + $INLINE_PRAGMA + " must be assigned to a function or method definition !");
    }
 end
 if (!found) MESSAGE("", "No pragma " + $INLINE_PRAGMA + " found !!!", "");
end

aspectdef inline_initialize

end

aspectdef inline_finalize

end


/**
  @return true if a pragma ($apragma) is named $INLINE_PRAGMA
*/
function isInlinePragma($apragma){
  return ($apragma.name === $INLINE_PRAGMA);  
}

function inlineObject($target) {
  if (isaFunction($target))  {
     inlineFunction($target);
     return true;
   }
  if (isaMethod($target)) {
	  inlineMethod($target);
	  return true;
  }
  return false;
}

function inlineFunction($target) {
    mkNewInlineName();
    if ($target.declarationJp === undefined ) {
      $target.insert before "#ifdef " + $CURRENT_ID_INLINE ;
      $target.insert before "inline ";
      $target.insert before "#endif";
    }
    else {
       var $decl =  $target.declarationJp;
       $target.insert before "#ifndef " + $CURRENT_ID_INLINE ;      
       $target.insert after "#endif";

       var $cp = $target.copy();
       $cp.setValue("isInline", true);
       $decl.insert before "#ifdef " + $CURRENT_ID_INLINE ;
       $decl.insert before $cp.code;
       $decl.insert before "#else";
       $decl.insert after "#endif";
    }
}

function inlineMethod($target) {
  mkNewInlineName();
  $target.insert before "#ifndef " + $CURRENT_ID_INLINE ;      
  $target.insert after "#endif";
       
  var $decl =  $target.declarationJp;
  var $body =  $target.body;
  var returnType = getStrReturnType($target);
  var codeParams = getStrParams($target);
  var vattr="";
  if ($target.functionType.constant) vattr = " const ";
  var codeDecl = "inline " + returnType + ' '+  $decl.getName() + ' ' + codeParams + vattr + $body.code + ';';
  // println(" functionType = " + $target.functionType.constant);
  $decl.insert before "#ifndef " + $CURRENT_ID_INLINE ;      
  $decl.insert after "#endif";
  $decl.insert after codeDecl;
  $decl.insert after "#else";
}


 function mkNewInlineName()
 {
 	$CPT_INLINE ++;
	$CURRENT_ID_INLINE = $ID_INLINE_PRAGMA + + $CPT_INLINE;
 }
 