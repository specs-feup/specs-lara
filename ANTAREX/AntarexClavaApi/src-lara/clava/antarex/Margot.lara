aspectdef MargotExampleLauncher

	println("mARGOt library testing");
	

	var m = new Margot('block1', 'alpha', 'beta');

	select call{'foo'} end
	apply
	    /* inserts update call */
	    /* the last arguments are addition statements to be included in the if */
	    m.update($call, '// update performed', '// do not forget to log');
	    
	    /* inserts the log call */
	    //m.log($call);
	    
	    /* inserts start monitor call */
	    //m.startMonitor($call, '/* arg for monitor start */');
	    /* inserts stop monitor call */
	    //m.stopMonitor($call, '/* arg for monitor stop */');
	    
	    /* inserts start and stop monitor calls */
	    //m.monitor($call, ['/*start*/'], ['/*stop*/']);
	    
	    /* insert log, start and stop monitor calls */
	    //m.monitorLog($call);
	end
end

/* LIBRARY CODE */

/**
 * Represents a mARGOt autotuner instance.
 * 
 * @constructor
 * @param {string} block - the name of the block, this is mandatory
 * @param {string} vars - the variables that will be updated, this is an optional list
 * */
var Margot = function (block) {
    
    this.block = block;
    this.vars = Array.prototype.slice.call(arguments, 1);
    
    /* initializes the framework */
    var mi = new MargotInit();
    mi.call();
    
    /* update function */
    this.update = function(joinpoint) {
        var mu = new MargotUpdate();
        mu.call(joinpoint,
                this.block,
                this.vars,
                Array.prototype.slice.call(arguments, 1)
        );
    };
    
    /* log function */
    this.log = function(joinpoint) {
        var ml = new MargotLog();
        ml.call(joinpoint, this.block);
    };
    
    /* start monitor function */
    this.startMonitor = function(joinpoint) {
        var mstart = new MargotStartMonitor();
        mstart.call(joinpoint,
                this.block,
                Array.prototype.slice.call(arguments, 1)
        );
    };
    
    /* stop monitor function */
    this.stopMonitor = function(joinpoint) {
        var mstop = new MargotStopMonitor();
        mstop.call(joinpoint,
                this.block,
                Array.prototype.slice.call(arguments, 1)
        );
    };
    
    /* start and stop monitor functions */
    /* needs two arrays for the parameters of start and stop */
    this.monitor = function(joinpoint, startArgs, stopArgs) {
        var mm = new MargotMonitor();
        mm.call(joinpoint,
                this.block,
                startArgs,
                stopArgs
        );
    };
    
    /* log, start and stop monitor functions */
    /* needs two arrays for the parameters of start and stop */
    this.monitorLog = function(joinpoint, startArgs, stopArgs) {
        
        var ml = new MargotLog();
        ml.call(joinpoint, this.block);
        
        var mm = new MargotMonitor();
        mm.call(joinpoint,
                this.block,
                startArgs,
                stopArgs
        );
    };
};

var MargotCxxStrings = {
    
    /* code parts */
    ns: 'margot',
    sep: '::',
    initCode: 'init();',
    incCode: 'margot.hpp',
    updCode: 'update',
    appliedCode:  'margot::elaboration::manager.configuration_applied();',
    startCode: 'start_monitor',
    stopCode: 'stop_monitor',
    logCode: 'log();',
    
    
    /* code generation functions */
    init: function() {
        return this.ns + this.sep + this.initCode;
    },
    
    inc: function() {
        return this.incCode;
    },
    
    update: function(block, vars, additionalCode) {
        
        var code = 'if(';
        
        code += this.ns + this.sep + block + this.sep + this.updCode;
        code += '(' + vars.toString() + ')';
        code += ' != 0';
        
        code += ') {\n';
        for(var ac of additionalCode) {
            code += ac + '\n';
        }
        code += this.appliedCode + '\n}';
        return code;
    },
    
    start: function(block, args) {
        
        var code = this.ns + this.sep + block + this.sep + this.startCode;
        code += '(' + args.toString() + ');';
        
        return code;
    },
    
    
    stop: function(block, args) {
        var code = this.ns + this.sep + block + this.sep + this.stopCode;
        code += '(' + args.toString() + ');';
        
        return code;
    },
    
    
    log: function(block) {
        return this.ns + this.sep + block + this.sep + this.logCode;
    }
};

aspectdef MargotInit

    select file.function{'main'}.body end
    apply
        $body.exec insertBegin(MargotCxxStrings.init());
        $file.exec addInclude(MargotCxxStrings.inc(), true);
    end
end

aspectdef MargotUpdate

    input
        $joinpoint,
        block,
        vars,
        additionalCode = []
    end
    
    $joinpoint.insert before(MargotCxxStrings.update(block, vars, additionalCode));
    
    var $parentFile = $joinpoint.ancestor('file');
    $parentFile.exec addInclude(MargotCxxStrings.inc(), true);
end

aspectdef MargotLog
    input
        $joinpoint,
        block
    end
    
    $joinpoint.insert after(MargotCxxStrings.log(block));
    
    var $parentFile = $joinpoint.ancestor('file');
    $parentFile.exec addInclude(MargotCxxStrings.inc(), true);
end


aspectdef MargotStartMonitor
    input
        $joinpoint,
        block,
        startArgs = []
    end
    
    $joinpoint.insert before(MargotCxxStrings.start(block, startArgs));
    
    var $parentFile = $joinpoint.ancestor('file');
    $parentFile.exec addInclude(MargotCxxStrings.inc(), true);
end

aspectdef MargotStopMonitor
    input
        $joinpoint,
        block,
        stopArgs = []
    end
    
    $joinpoint.insert after(MargotCxxStrings.stop(block, stopArgs));
    
    var $parentFile = $joinpoint.ancestor('file');
    $parentFile.exec addInclude(MargotCxxStrings.inc(), true);
end

aspectdef MargotMonitor
    input
        $joinpoint,
        block,
        startArgs = [],
        stopArgs = []
    end
    
    call MargotStartMonitor($joinpoint, block, startArgs);
    call MargotStopMonitor($joinpoint, block, stopArgs);
end
