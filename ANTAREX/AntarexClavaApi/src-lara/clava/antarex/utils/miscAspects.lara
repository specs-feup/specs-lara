
aspectdef GetFunctions
	output
		notDeclared = [],
		functions = new LaraObject()
	end
		var DEBUG = false;
		var apis = new  LaraObject();
		//Select all functions of the application.
		select function end
		apply 
			functions.push($function.name, $function.name);
		end
	
  		 if (DEBUG) for (var f of functions) println(" Declared = " + f[0]);

		//Select calls inside methods
		select call end
		apply
		  //if 'functions' does not contain the declaration of the called method, add it as an API
	 	 if(! ($call.name in functions)) apis.set( $call.name, $call.name);
		end
		
    	if (DEBUG) for (var f of apis) println(" Not Declared = " + f);
    	
		for (var f of apis) notDeclared.push(f);
	end

aspectdef getClassNames
output
 classes = []
 end
 select class end  
 apply
    classes.push($class.name);
 end
end


/** Return in the output lnamesvar the set of the name of the globals variables of 
    the application (visiting also the included files).
*/
aspectdef getGlobals
   input 
     theFile
   end
   output
     lnamesvar=[]
   end
   var lincludes=[];
   var xx = theFile.astChildren;
   for (var x of xx) {
      println( " gastChild = " + x.astName  + ", type " + x.name);
      if (x.astName === "IncludeDecl")  lincludes.push(x.name);
    }
    for (var vincl of lincludes) {
	call cc : getGlobalsString(vincl);
      for (var x of cc.lnamesvar ) lnamesvar.push(x);	
    }
    select theFile.vardecl end
 	apply
 	 if (isGlobalVariable($vardecl)) lnamesvar.push($vardecl.name);
   end
   end
   
aspectdef getGlobalsString
   input 
     filename
   end
   output
     lnamesvar=[]
   end
   select file{filename} end
    apply
        call cc : getGlobals($file);
        lnamesvar = cc.lnamesvar;
     end
   end

/** Add the declaration (vdecl) in a class (vclass). */
aspectdef addDeclMethodToClass
 input
   vdecl, vclass
 end
 select class{vclass}.method end
 apply	
  // println( "addDeclMethodToClass = " + vdecl + " class = " + $class.code);
  $method.insert after vdecl; 
  break;
 end
 end

function getClassNameMethod(m)
 {
  return  m.record.name; 
 }

function isGlobalVariable($vardecl) {
    if ($vardecl.isParam) return false;
    return ( $vardecl.astParent.astParent.astName === "TranslationUnit");  // global ?
   }
/** Return the set of the includes referenced in a file(theFile).*/
function getIncludes(theFile)
{
   lincludes=[];
   var xx = theFile.astChildren;
   for (var x of xx)
    {
      // println( " gastChild = " + x.astName  + ", type " + x.name);
      if (x.astName === "IncludeDecl")  lincludes.push(x.name);
    }
 return lincludes;
}
