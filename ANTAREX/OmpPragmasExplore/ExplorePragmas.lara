import weaver.WeaverJps;
import clava.Clava;
import lara.cmake.CMaker;
import lara.util.ProcessExecutor;

aspectdef ExplorePragmas 
	output executionTimes = {} end
	
	println("Executing ExplorePragmas");

	var timePrefix = "Time in seconds =";
	var numRuns = 1;

	var cFlags = "-g -Wall -O3 -mcmodel=medium";
	
	// Collect all pragmas
	var ompPragmas = WeaverJps.search('pragma', {name:'omp'}).get();

	// Adding "no pragmas" case as the first element, in order to calculate the timeout
	var serialVersion = "serial version";
    	ompPragmas = [serialVersion].concat(ompPragmas);
	var timeout = undefined; 	
 
	println("Found " + ompPragmas.length + " pragmas to test");
	var counter = 1;
	// For each pragma, create a copy and disable all the others
	for(var ompPragma of ompPragmas) {
		if(ompPragma === serialVersion) {
			println("Testing serial version");
		} else {
			println("Enabling pragma " + counter + ": " + ompPragma.location+ " -> " + ompPragma.code);		
			counter++;
		}
				
		var ompPragmaLocation = ompPragma === serialVersion ? serialVersion : ompPragma.location;
		
		// Initialize pragma execution times
		executionTimes[ompPragmaLocation] = [];
		
		// Create a copy of the current AST and push it into the AST stack
		Clava.pushAst();
		
		for(var ompPragmaCopy of WeaverJps.search('pragma', {name:'omp'}).get()) {
			if(ompPragmaCopy.location === ompPragmaLocation) {
				println("Found pragma " + ompPragmaCopy.code);
				continue;
			}
			
			ompPragmaCopy.detach();
		}
		
		
		// Compile current AST
		var cmaker = (new CMaker("pragmaExplore"))
						//.setGenerator("MinGW Makefiles")
						//.setMakeCommand("mingw32-make")
						.addCurrentAst()
						.setPrintToolsOutput(true);

		cmaker.addFlags(cFlags);
		cmaker.addLibs("m");
		
		var openMPCmakeCode = %{find_package(OpenMP REQUIRED)
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}" )}%;
		
		cmaker.setCustomCMakeCode(openMPCmakeCode);
		
		var cmakeListsFolder = Io.mkdir("cmaker-src");
		var buildFolder = Io.mkdir(cmakeListsFolder, "build");
		var executable = cmaker.build(cmakeListsFolder, buildFolder);
		
		if(timeout === undefined && ompPragma !== serialVersion) {
			throw "Time out is undefined and we are testing pragma '"+ompPragma+"', check if serial version is being executed";
		}

		for(var i=0; i<numRuns; ++i) {
			println("Executing run " + (i+1) + " of " + numRuns);
			var executor = new ProcessExecutor();
			executor.setTimeUnit("SECONDS");
			if(timeout !== undefined) {
				executor.setTimeout(timeout);
			}
			
			executor.execute(executable);
			
			
			// Set maximum value
			var value = undefined;
			
			// Execution completed correctly, extract value
			if(executor.getReturnValue() === 0) {
				var valueString = Strings.extractValue(timePrefix, executor.getConsoleOutput());

				if(valueString === null) {
					throw "Could not extract value from console output when using the prefix '"+timePrefix+"':\n" + executor.getConsoleOutput();
				}

				// Convert to number
				value = parseFloat(valueString.trim());
			} else {
				value = timeout;
			}
		
			executionTimes[ompPragmaLocation].push(value);
			
			// Rewrite execution times file after each new value
			Io.writeJson("executionTimes.json", executionTimes);

			if(timeout === undefined && ompPragma === serialVersion) {
				// Time out is the time of serial execution + 5%
				timeout = value * 1.05;
			}
		}
	
		// Discard the top-most AST of the AST stack
		Clava.popAst();
	}
	
	println("Execution times:");
	printObject(executionTimes);
	Io.writeJson("executionTimes.json", executionTimes);
	

end
