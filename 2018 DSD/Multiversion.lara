import CreateFloatVersion;
import lara.code.Timer;
import clava.ClavaJoinPoints;
import ChangePrecision;

 var $double = ClavaJoinPoints.builtinType("double");
 var $float = ClavaJoinPoints.builtinType("float");

aspectdef Multiversion
	input $func, knobName end
	
	call fVersion : CreateFloatVersion($func, "_f");
	var $floatFunc = fVersion.$clonedFunc;
	
	var timer = new Timer();
	
	 // Identify call by name...
	 select function.body.stmt.call{$func.name} end
	 apply
	 
		if(!$call.isStmtCall)
			continue;
		
		// ... and by type signature
		if(!$func.functionType.equals($call.functionType))
			continue;
			
		$body.exec addLocal(knobName, ClavaJoinPoints.builtinType('int'), 0);

		/* create float arg and declaration for first argument */
		var $floatArg = createFloatArg($call.args[0]);
		/* Create call based on float version of function */
		$floatFunc.exec $floatCall : newCall([$floatArg, $call.args[1]]);
		
		// copy current call
		$call.exec $callCopy : copy();
		//$call.exec $callCopy : copy;
		//$callCopy = $call.copy();
		
		var $condition = ClavaJoinPoints.exprLiteral(knobName);
		call switchJp : CreateSwitch($condition, {0: $callCopy, 1: $floatCall});
				
		$stmt.exec replaceWith(switchJp.$switch);

		timer.time($callCopy, "Original time:");
		timer.time($floatCall, "Float time:");
	 end

	
end


aspectdef CreateSwitch
	input
		$condition, switchCases
	end

	output
		$switch
	end
	
	println("Switch Cases:");
	printObject(switchCases);
	
	var cases = [];
	for(key in switchCases) {
		cases.push(ClavaJoinPoints.exprLiteral(key));
		cases.push(switchCases[key]);
	}
	
	$switch = ClavaJoinPoints.switchStmt($condition, cases);
	
end

function createFloatArg($varref) {
	if($varref.joinPointType !== "varref") {
		throw "createFloatArg: input must be a 'varref' join point";
	}

	
	// create varref for float function 
	$varref.exec $floatArg : copy();
	$floatArg.def name = $varref.name + "_f";

	// create varredecl
	var $vardeclFloat = ClavaJoinPoints.varDeclNoInit($varref.name + "_f", changeType($varref.type, $double, $float));
	
	// Insert after original declaration
	$varref.declaration.insertAfter($vardeclFloat);
	
	return $floatArg;
}

